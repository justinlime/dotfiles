#+TITLE: Justinlime's Emacs
#+AUTHOR: justinlime
#+DESCRIPTION: Justinlime's Emacs
#+PROPERTY: header-args :tangle yes
#+STARTUP: showeverything, inlineimages
#+OPTIONS: f:nil
#+EXPORT_SELECT_TAGS: noexport

* TABLE OF CONTENTS :toc_4:noexport:
- [[#general][General]]
  - [[#late-init][Late Init]]
    - [[#package-manger][Package Manger]]
  - [[#preferences][Preferences]]
    - [[#littering][Littering]]
      - [[#buffer-litter][Buffer Litter]]
      - [[#file-litter][File litter]]
    - [[#gui][GUI]]
    - [[#scrolling][Scrolling]]
    - [[#fonts][Fonts]]
    - [[#colorscheme][Colorscheme]]
    - [[#misc][Misc]]
- [[#configurations][Configurations]]
  - [[#keybinds][Keybinds]]
    - [[#generalel][General.el]]
    - [[#evil][Evil]]
      - [[#evil-mode][Evil Mode]]
      - [[#evil-collection][Evil Collection]]
      - [[#evil-org-agenda][Evil Org Agenda]]
    - [[#keychord][Keychord]]
    - [[#which-key][Which Key]]
  - [[#toggle-term][Toggle Term]]
  - [[#tramp][Tramp]]
  - [[#dired][Dired]]
    - [[#wdired][wDired]]
    - [[#diredfl][Diredfl]]
    - [[#dired-filter][Dired Filter]]
    - [[#dired-actions][Dired Actions]]
    - [[#dired-subtree][Dired Subtree]]
    - [[#dired-sidetree][Dired Sidetree]]
    - [[#dired-async][Dired Async]]
  - [[#eglot][Eglot]]
  - [[#communication][Communication]]
    - [[#erc][ERC]]
    - [[#ement][Ement]]
  - [[#term][Term]]
  - [[#org][Org]]
    - [[#org-agenda][Org Agenda]]
    - [[#org-toc][Org Toc]]
    - [[#org-autolist][Org Autolist]]
    - [[#org-appear][Org Appear]]
    - [[#org-modern][Org Modern]]
    - [[#org-last-modified][Org Last Modified]]
    - [[#org-roam][Org Roam]]
    - [[#org-roam-ui][Org Roam UI]]
    - [[#olivetti][Olivetti]]
  - [[#minibuffer][Minibuffer]]
    - [[#vertico][Vertico]]
    - [[#marginalia][Marginalia]]
  - [[#finding][Finding]]
    - [[#zoxide][Zoxide]]
    - [[#affe][Affe]]
    - [[#consult][Consult]]
  - [[#completion][Completion]]
    - [[#corfu][Corfu]]
      - [[#corfu-terminal][Corfu Terminal]]
    - [[#cape][Cape]]
    - [[#orderless][Orderless]]
  - [[#git][Git]]
    - [[#magit][Magit]]
    - [[#git-gutter][Git Gutter]]
  - [[#misc-1][Misc]]
    - [[#dashboard][Dashboard]]
    - [[#perspective][Perspective]]
    - [[#undo-tree][Undo Tree]]
    - [[#direnv][Direnv]]
    - [[#sideline][Sideline]]
      - [[#sideline-flymake][Sideline Flymake]]
    - [[#yasnippet][Yasnippet]]
      - [[#yasnippet-capf][Yasnippet Capf]]
    - [[#sudo-edit][Sudo Edit]]
  - [[#programming-modes][Programming Modes]]
    - [[#python-mode][Python Mode]]
    - [[#javascript-mode][Javascript Mode]]
    - [[#typescript-mode][TypeScript Mode]]
    - [[#web-mode][Web Mode]]
    - [[#go-mode][Go Mode]]
    - [[#nix-mode][Nix Mode]]
    - [[#lua-mode][Lua Mode]]
    - [[#elixir-mode][Elixir Mode]]
    - [[#rust-mode][Rust Mode]]
    - [[#powershell-mode][PowerShell Mode]]
    - [[#markdown-mode][Markdown Mode]]
  - [[#style][Style]]
    - [[#themes][Themes]]
    - [[#modeline][Modeline]]
    - [[#nerd-icons][Nerd Icons]]
      - [[#nerd-icons-dired][Nerd Icons Dired]]
      - [[#nerd-icons-corfu][Nerd Icons Corfu]]
      - [[#nerd-icons-completion][Nerd Icons Completion]]
      - [[#nerd-icons-ibuffer][Nerd Icons Ibuffer]]
    - [[#highlight-todo][Highlight TODO]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#prism-mode][Prism Mode]]
    - [[#pulsar][Pulsar]]
    - [[#treesitter][Treesitter]]
    - [[#additional-touches][Additional touches]]

* General
** Late Init
#+begin_src emacs-lisp
;; revert inflated GC defined in early init to avoid GC pauses while editing
(add-hook 'after-init-hook (lambda ()
    (setq file-name-handler-alist file-name-handler-alist-original)
    (makunbound 'file-name-handler-alist-original)))
;; Revert again just in case if out of focus (doesnt work for terminal emacs)
;; and use the chance to collect garbage
(add-hook 'focus-out-hook (lambda ()
  (setq gc-cons-threshold (* 1024 1024 16) ; 16mb
        gc-cons-percentage 0.1)
  (garbage-collect)))
;; Revert after 5 seconds of being idle as an additonal precaution
(run-with-idle-timer 5 nil
  (lambda ()
    (setq gc-cons-threshold (* 1024 1024 16) ; 16mb
          gc-cons-percentage 0.1)))

;; Check if running on WSL
(if (string-match-p "Microsoft" (getenv "PATH"))
  (setq jl/is-wsl t)
  (setq jl/is-wsl nil))
#+end_src 
*** Package Manger
#+begin_src emacs-lisp 
(require 'package) ; load the package manager
(setq package-check-signature nil) ; override signature errors
;; add package archives to package manager
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize) ; exactly what it sounds like 
(require 'use-package) ; load use package
(setq use-package-always-ensure t) ; integrate with package.el
;; pull archvies and prevent warning messages only on very first startup
(unless package-archive-contents
  (progn
    (setq warning-minimum-level :emergency) 
    (package-refresh-contents)))
#+end_src

** Preferences 
*** Littering
**** Buffer Litter
#+begin_src emacs-lisp
;; Kill *Help* after :q'ing
(advice-add #'evil-quit :after (lambda (&rest r)
  (let ((buf (get-buffer "*Help*")))
    (if (eq buf nil) nil
      (kill-buffer buf)))))

;; Disables all startup warnings, and kills message buffer, comment this out when debugging
(setq warning-minimum-level :emergency)
(setq-default message-log-max nil)
(add-hook 'emacs-startup-hook (lambda () ;Kills the warning buffer for even emergency messages
  (kill-buffer (get-buffer "*Messages*"))))
#+end_src
**** File litter
#+begin_src emacs-lisp
(setq make-backup-files nil ; stop creating ~ files
      auto-save-default nil ; Disable autosave # files
      create-lockfiles nil  ; Disable .# files
      ;; Prevent emacs from trying to write to init.el
      custom-file (concat user-emacs-directory "trash.el"))
#+end_src
*** GUI
#+begin_src emacs-lisp
(setq use-dialog-box nil) ; No dialog box
(menu-bar-mode -1) ; Disable menu
(tool-bar-mode -1) ; Disable toolbar
(scroll-bar-mode -1) ; Disable scroll bar
;; Transparency
(let ((opacity 100))
  (set-frame-parameter nil 'alpha-background opacity) ; For current frame
  (add-to-list 'default-frame-alist `(alpha-background . ,opacity))) ; For all new frames henceforth
#+end_src
*** Scrolling
#+begin_src emacs-lisp 
(setq-default pixel-scroll-precision-mode t
              fast-but-imprecise-scrolling t
              mouse-wheel-scroll-amount '(1 ((shift) . 1)) ; one line at a time
              mouse-wheel-progressive-speed nil ; don't accelerate scrolling
              mouse-wheel-follow-mouse t ; scroll window under mouse
              mouse-wheel-tilt-scroll t
              scroll-margin 7
              scroll-preserve-screen-position t
              scroll-conservatively 10)
#+end_src
*** Fonts
#+begin_src emacs-lisp
(setq jl/font-size (if jl/is-wsl 200 120))
(setq jl/mono-font "FiraCodeNerdFont")
(defun jl/set-local-font (font-size)
  "Function to be added in a hook, to set the font size for specific modes"
  (face-remap-add-relative 'default `(:height ,font-size))
  (face-remap-add-relative 'variable-pitch `(:height ,font-size))
  (face-remap-add-relative 'fixed-pitch `(:height ,font-size))
  (face-remap-add-relative 'italic `(:height ,font-size))
  (face-remap-add-relative 'bold `(:height ,font-size))
  (face-remap-add-relative 'bold-italic `(:height ,font-size)))
(let ((variable "Roboto"))
  (set-face-attribute 'default nil
    :font jl/mono-font
    :height jl/font-size
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font variable
    :height jl/font-size
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font jl/mono-font
    :height jl/font-size 
    :weight 'medium)
  (set-face-attribute 'italic nil 
    :font jl/mono-font
    :slant 'italic
    :height jl/font-size) 
  (set-face-attribute 'bold nil 
    :font jl/mono-font
    :weight 'ultra-bold
    :height jl/font-size) 
  (set-face-attribute 'bold-italic nil 
    :font jl/mono-font
    :weight 'ultra-bold
    :slant 'italic
    :height jl/font-size))
(setq-default line-spacing 0.10)
(set-language-environment "UTF-8")
#+end_src
*** Colorscheme
#+begin_src emacs-lisp
(setq jl/bg-0 "#11111B"
      jl/bg-1 "#181825"
      jl/bg-2 "#1e1e2e"
      jl/acc-0 "#CBA6F7"
      jl/acc-1 "#89B4FA"
      jl/acc-2 "#cdd6f4")
#+end_src
*** Misc
#+begin_src emacs-lisp
;; emacs -nw settings
(unless (display-graphic-p)
  ;; Disable $ on truncated lines
  (set-display-table-slot standard-display-table 'truncation 32)
  (xterm-mouse-mode 1) ; Enable mouse in term-mode
  ;; let terminal emacs use system clipboard
  ;; check out the xclip package if this doesn't work
  (setq xterm-extra-capabilities '(getSelection setSelection)))
(setq blink-cursor-mode nil ; Exactly what is sounds like
      use-short-answers t ; Set y or n instead of yes or no for questions
      comment-empty-lines t ; Comment empty lines in selecetd region too
      initial-major-mode 'org-mode
      initial-scratch-message "* Scratch

"
      display-line-numbers-type 'relative ; Realive line numbers
      frame-resize-pixelwise t) ; Better frame resizing
(setq-default tab-width 2 ; self explanitory
              indent-tabs-mode nil ; use spaces not tabs
              truncate-lines t) ;Allow truncated lines
(electric-pair-mode 1) ; Auto closing pairs like () and {}
(save-place-mode) ; Save cursor position in buffer on reopen
(electric-indent-mode t) ; Auto Indent
(global-display-line-numbers-mode 1) ; Display line numbers
(global-prettify-symbols-mode) ; prettyyyyyyy
#+end_src
* Configurations
** Keybinds
*** General.el
#+begin_src emacs-lisp
(use-package general
  :config
    (general-define-key 
      :keymaps 'indent-rigidly-map
        "TAB" #'indent-rigidly-right-to-tab-stop
        "<tab>" #'indent-rigidly-right-to-tab-stop
        "DEL" #'indent-rigidly-left-to-tab-stop
        "<backtab>" #'indent-rigidly-left-to-tab-stop
        "h" #'indent-rigidly-left
        "l" #'indent-rigidly-right)
    ;; set up 'SPC' as the global leader key
    (general-create-definer leader
      :states '(normal insert visual emacs motion)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
    (leader
      "b k" '((lambda () (interactive) (kill-buffer (current-buffer))) :wk "Kill this buffer")
      "b r" '(revert-buffer :wk "Reload this buffer"))
    (leader
      "e" '(:ignore t :wk "Evaluate")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e r" '(eval-region :wk "Evaluate selected elisp")) 
    (leader
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Help function")
      "h v" '(describe-variable :wk "Help variable")
      "h m" '(describe-mode :wk "Help mode")
      "h c" '(describe-char :wk "Help character")
      "h k" '(describe-key :wk "Help key/keybind"))
    (leader
      "c r" '(comment-or-uncomment-region :wk "Comment selection")
      "c l" '(comment-line :wk "Comment selection"))
    (leader
      "f f" '(find-file :wk "Find File"))
    (leader
      "i r" '(indent-rigidly :wk "Indent Rigidly")))
#+end_src
*** Evil
**** Evil Mode
#+begin_src emacs-lisp
(use-package evil
  :general
    (leader
      "w" '(:ignore t :wk "Window Navigation")
      "w h" '(evil-window-left :wk "Move left to window")
      "w <left>" '(evil-window-left :wk "Move left to window")
      "w j" '(evil-window-down :wk "Move down to window")
      "w <down>" '(evil-window-down :wk "Move down to window")
      "w k" '(evil-window-up :wk "Move up to window")
      "w <up>" '(evil-window-up :wk "Move up to window")
      "w l" '(evil-window-right :wk "Move right to window")
      "w <right>" '(evil-window-right :wk "Move right to window")
      "w s" '(evil-window-split :wk "Split window horizontally")
      "w v" '(evil-window-vsplit :wk "Split window vertically"))
    (:states 'insert
      "<tab>" #'tab-to-tab-stop
      "TAB" #'tab-to-tab-stop)
    (:states '(normal insert visual emacs)
      "C-u" #'evil-scroll-up
      "C-d" #'evil-scroll-down)
    (:states '(normal emacs)
      "J" #'shrink-window
      "K" #'enlarge-window
      "H" #'shrink-window-horizontally
      "L" #'enlarge-window-horizontally
      "u" #'undo-tree-undo
      "R" #'undo-tree-redo)
  :init      
    (setq evil-want-integration t 
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-shift-width 4)
    (evil-mode)
  :config
    ;; These hooks may not work if TERM isnt xterm/xterm256
    ;; Let cursor change based on mode when using emacs in the terminal
    (unless (display-graphic-p)
      (add-hook 'post-command-hook (lambda ()
        (setq visible-cursor nil) 
        (if (eq evil-state 'insert)
          (send-string-to-terminal "\e[5 q")
          (send-string-to-terminal "\e[2 q"))))))
#+end_src
**** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
    (setq evil-collection-mode-list '(magit doc-view ement term minibuffer help dashboard dired ibuffer tetris))
    (evil-collection-init))
#+end_src
**** Evil Org Agenda
#+begin_src emacs-lisp
(use-package evil-org
  :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
*** Keychord
#+begin_src emacs-lisp
(use-package key-chord
  :hook (evil-insert-state-entry . key-chord-mode)
  :config
    (setq key-chord-two-keys-delay 0.5
          key-chord-one-key-delay 0.5)
    ;; (key-chord-define evil-insert-state-map  "nn" 'evil-normal-state)
    (key-chord-define evil-insert-state-map  "jj" 'evil-normal-state))
#+end_src 
*** Which Key
#+begin_src emacs-lisp 
(use-package which-key
  :config
    (which-key-mode 1)
    (setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-window-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.8
      which-key-max-description-length 25
      which-key-allow-imprecise-window-fit t
      which-key-separator " → " ))
#+end_src
** Toggle Term
#+begin_src emacs-lisp
(use-package toggle-term
  :general
    (leader
      "t t" '(toggle-term-toggle :wk "Toggle the active toggle-term")
      "t f" '(toggle-term-find :wk "Find a toggle-term, or create a new one"))
  :hook (toggle-term-spawn . (lambda () (evil-insert 1)))
  :config
    (setq toggle-term-size 25)
    (setq toggle-term-init-toggle '("term" . "term"))
    (setq toggle-term-use-persp t)
    (setq toggle-term-switch-upon-toggle t))
#+end_src
** Tramp
#+begin_src emacs-lisp
(defun jl/ssh (host formatter)
  (persp-switch host)
  (let ((format-host (format formatter host host)))
    (find-file format-host))
    (toggle-term-find "term" "term")
    (mapc (lambda (char) (execute-kbd-macro (char-to-string char))) (format "ssh %s" host))
    (execute-kbd-macro (kbd "RET")))
(defun jl/ssh-root (host)
  "SSH with sudo privledges using a host from .ssh/config"
  (interactive "sEnter host: ")
  (jl/ssh host "/ssh:%s|sudo:%s:/"))
(defun jl/ssh-user (host)
  "SSH using a host from .ssh/config"
  (interactive "sEnter host: ")
  (jl/ssh host "/ssh:%s:~"))
(defun jl/samba (host)
  (interactive "sEnter user@ip: ")
  (find-file (format "/smb:%s:" host)))
(leader
  "s u" '(jl/ssh-user :wk "SSH as user, using the ssh config file")
  "s r" '(jl/ssh-root :wk "SSH as user with root privledges, using the ssh config file")
  "s m" '(jl/samba :wk "Access an SMB share"))

;; Prevent tramp from trying to save to auth-info
;; It stores passwords in plain text (WTF...)
(connection-local-set-profile-variables
 'remote-without-auth-sources '((auth-sources . nil)))
(connection-local-set-profiles
 '(:application tramp) 'remote-without-auth-sources)

;; Optimization
(with-eval-after-load 'tramp
  (add-to-list 'tramp-connection-properties
                  (list "/ssh:" "direct-async-process" t)
                  (list "/rsync:" "direct-async-process" t))
  (setq tramp-inline-compress-start-size 1000
        tramp-copy-size-limit 10000
        vc-handled-backends '(Git)
        tramp-verbose 1 ; shut the fuck up tramp
        password-cache-expiry nil ; stop tramp from forgetting passwords
        ;; force tramp to use the default .ssh config for controlmaster
        ;; makes things quicker and retains passwords
        tramp-use-ssh-controlmaster-options t
        ;; Let tramp re-use the ssh connection
        ;; The preferred way to do this is to add the following
        ;; to your ~/.ssh/config:
        ;; 
        ;; Host *
        ;;   ControlMaster auto
        ;;   ControlPath ~/.ssh/master-%r@%h:%p
        ;;   Compression yes
        ;;   ControlPersist 15m
        tramp-ssh-controlmaster-options (concat
          "-o ControlMaster=auto "
          "-o ControlPath=~/.ssh/master-%%r@%%h:%%p "
          "-o ControlPersist=15m ")
        remote-file-name-inhibit-cache nil)) ; remember more filenames
#+end_src
** Dired
#+begin_src emacs-lisp
(defun jl/dired-open ()
  "Open a file, or play marked files with MPV depending on media extension"
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (member (file-name-extension file) '("mp4" "mkv" "mov" "flac" "webm" "mp3" "ogg" "opus" "aac"))
      (apply #'start-process "" nil "mpv" (dired-get-marked-files))
      (dired-find-file))))
(defun jl/clear-marks-advice (&rest r)
  "Helper used as advice, for clearing marks and reverting the buffer"
  (dired-unmark-all-marks)
  (revert-buffer))
;; dont prompt ever time for recursion
(setq dired-listing-switches "-alFh --group-directories-first"
      dired-recursive-copies 'always
      dired-hide-details-hide-symlink-targets nil
      large-file-warning-threshold nil
      dired-recursive-deletes 'always)
(add-hook 'dired-mode-hook (lambda () 
  (hl-line-mode 1)
  (face-remap-add-relative 'hl-line
                `(:foreground ,jl/bg-0 :background ,jl/acc-1 :extend t))
  (setq-local cursor-type nil
              evil-force-cursor t
              auto-revert-verbose nil)
  (jl/set-local-font (+ jl/font-size 10))
  (dired-omit-mode)
  (auto-revert-mode)
  (dired-hide-details-mode)
  (display-line-numbers-mode -1)))
(put 'dired-find-alternate-file 'disabled nil) ;Allow "dired-find-alternate-file to work without a prompt"
;; Clear all marked files upon action
(advice-add #'dired-do-delete :after #'jl/clear-marks-advice)
(advice-add #'dired-do-rename :after #'jl/clear-marks-advice)
(advice-add #'dired-do-flagged-delete :after #'jl/clear-marks-advice)
(general-define-key
  :states 'normal
  :keymaps 'dired-mode-map
    "s" #'dired-hide-details-mode
    "l" #'jl/dired-open
    "d" nil
    "h" (lambda () (interactive) (find-file ".."))
    "A" #'dired-create-directory
    "a" nil
    "W" #'wdired-change-to-wdired-mode
    "RET" #'dired-find-file-other-window)
#+end_src
*** wDired
#+begin_src emacs-lisp
(setq wdired-allow-to-change-permissions t)
(general-define-key
  :states 'normal
  :keymaps 'wdired-mode-map
    "W" #'wdired-finish-edit
    "<escape>" #'wdired-exit)
; fix icons looking weird after exiting 
(advice-add #'wdired-exit :after (lambda (&rest r) (revert-buffer)))
#+end_src
*** Diredfl
#+begin_src emacs-lisp
(use-package diredfl 
  :hook (dired-mode . diredfl-mode)
  :config
    (set-face-attribute 'diredfl-dir-heading nil :height (+ jl/font-size 20) :foreground jl/acc-0))
#+end_src
*** Dired Filter
#+begin_src emacs-lisp
(use-package dired-filter
  :general (:keymaps 'dired-mode-map 
            :states 'normal
              "/" #'dired-filter-by-name
              ";" #'dired-filter-pop-all)
  :config
  (setq dired-filter-revert 'always))
#+end_src
*** Dired Actions
#+begin_src emacs-lisp
(use-package dired-actions
  :vc (dired-actions :url "https://github.com/justinlime/dired-actions.el")
  :general 
    (:keymaps 'dired-mode-map 
     :states '(normal emacs motion)
       "y" #'dired-actions-capture
       "P" #'dired-actions-copy
       "M" #'dired-actions-move
       "Q" #'dired-actions-clear
       ;; "H" #'dired-actions-hardlink
       "S" #'dired-actions-symlink
       "L" #'dired-actions-symlink-relative)
  :init
    (add-hook 'dired-actions-post-action-hook #'dired-actions-clear)
    (add-hook 'dired-actions-post-capture-hook #'dired-unmark-all-marks))
#+end_src

*** Dired Subtree
#+begin_src emacs-lisp
(use-package dired-subtree
  :after diredfl
  :config 
    ;; force subtree to respect omit settings
    (add-hook 'dired-subtree-after-insert-hook (lambda ()
      (dired-omit-mode 1)))
    (dolist (depth '(1 2 3 4 5 6))
      (set-face-attribute (read (format "dired-subtree-depth-%s-face" depth)) nil :background nil)))
#+end_src
*** Dired Sidetree
#+begin_src emacs-lisp
(use-package dired-sidetree
  :vc (dired-sidetree :url "https://github.com/justinlime/dired-sidetree.el")
  :config
    (setq dired-sidetree-size 30
          dired-sidetree-side 'left)
  :general 
    (leader "d t" '(dired-sidetree-toggle :wk "Toggle the sidetree"))
    (:keymaps 'dired-sidetree-map
     :states '(normal emacs motion)
       "l" #'dired-sidetree-open
       "h" #'dired-sidetree-open-up
       "RET" #'dired-sidetree-open
       "<return>" #'dired-sidetree-open))
#+end_src
*** Dired Async
#+begin_src emacs-lisp
(use-package async 
  :hook (dired-mode . dired-async-mode)
  :config
    ;; Autorefresh the buffer if visible and other conditions
    (run-with-timer 0 2 (lambda ()
      (dolist (buf (buffer-list))
          (if (get-buffer-window buf)
            (with-current-buffer buf
              (if (and (derived-mode-p 'dired-mode)
                       (not dired-hide-details-mode)
                       (not (derived-mode-p 'wdired-mode))
                       (not (file-remote-p default-directory))
                       (eq evil-state 'normal))
                  (progn
                    (dired-revert)
                    (hl-line-mode)
                    (hl-line-mode)))))))))
#+end_src
** Eglot
#+begin_src emacs-lisp
;; Override the binary being used on startup
(setq eglot-events-buffer-size 0)
(with-eval-after-load 'eglot
  (mapc (lambda (server-remap) (add-to-list 'eglot-server-programs server-remap))
    '(((java-ts-mode java-mode) . ("java-language-server"))
      ((nix-ts-mode nix-mode) . ("nixd")))))
;; Enable modes for eglot
(add-hook 'find-file-hook (lambda ()
  (unless (file-remote-p (buffer-file-name)) 
    (when (member major-mode 
      '(go-ts-mode python-ts-mode js-ts-mode
        typescript-ts-mode rust-ts-mode elixir-ts-mode
        nix-ts-mode csharp-ts-mode csharp-mode java-ts-mode c-ts-mode
        bash-ts-mode)) (eglot-ensure)))))
#+end_src
** Communication 
*** ERC
#+begin_src emacs-lisp
(leader 
  "m i" '((lambda () (interactive) (persp-switch "irc") (switch-to-buffer (erc-tls))) :wk "IRC with erc-tls"))

(setq erc-prompt (lambda () (concat (buffer-name) " > " ))
      erc-fill-column 120
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20)

(use-package erc-hl-nicks 
  :after erc
  :config
    (add-to-list 'erc-modules 'hl-nicks))

(use-package erc-image
  :after erc
  :config
    (add-to-list 'erc-modules 'image)
    (setq erc-image-inline-rescale 300))

(use-package emojify
  :hook (erc-mode . emojify-mode))

(add-hook 'erc-mode-hook (lambda ()
  (toggle-truncate-lines) ; truncate lines in erc mode
  (persp-add-buffer (current-buffer)) ; fix erc buffers not being listed in buffer menu when using perspective.el
  (corfu-mode -1)
  (display-line-numbers-mode -1)))
#+end_src
*** Ement
#+begin_src emacs-lisp
;; connect with @<username>:host.org
(use-package ement
  :hook (ement-room-mode . (lambda () (display-line-numbers-mode -1)))
  :general
    (leader 
      "m m" '((lambda () (interactive) (persp-switch "matrix") (ement-connect)) :wk "Matrix with ement"))
    (:keymaps 'ement-room-minibuffer-map :states 'insert "RET" #'newline)
  :config
    (setq ement-notify-dbus-p nil))
#+end_src
** Term
#+begin_src  emacs-lisp
(add-hook 'term-mode-hook (lambda ()
  (general-define-key
    :states 'insert
    :keymaps 'term-raw-map
      "TAB" (lambda () (interactive) (term-send-raw-string "\t")))
  (face-remap-set-base 'default :background jl/bg-0)
  (face-remap-set-base 'fringe :background jl/bg-0)
  (defface term-background
  `((t (:inherit default :background ,jl/bg-0)))
  "Some bullshit to fix term-mode text-background"
  :group 'basic-faces)
    (setf (elt ansi-term-color-vector 0) 'term-background)
    (display-line-numbers-mode -1)))
#+end_src
** Org
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t
      org-hide-emphasis-markers t
      org-pretty-entities t)

(set-face-attribute 'org-code nil :foreground "#f38ba8")
(set-face-attribute 'org-document-info-keyword nil :inherit 'org-meta-line)

(let ((langs (mapcar (lambda (lang) `(,lang . t)) 
        '(python lisp awk emacs-lisp eshell clojure calc C ruby
          shell sed js ocaml scheme sql sqlite perl haskell css lua java))))
  (org-babel-do-load-languages 'org-babel-load-languages langs))

(general-define-key
  :states 'normal 
  :keymaps 'org-mode-map
  "RET" #'org-open-at-point
  "<tab>" #'org-cycle
  "TAB" #'org-cycle
  "P" #'jl/org-grim-slurp)
(leader
  "o" '(:ignore t :wk "Org")
  "o i" '(org-id-get-create :wk "Insert an ID"))

(add-hook 'org-mode-hook (lambda ()
  (jl/set-local-font (+ jl/font-size 10))
  (org-indent-mode)
  (display-line-numbers-mode -1)
  (setq-local electric-indent-mode nil)))

;; Inline images
(defun jl/org-resize-inline ()
  (when (derived-mode-p 'org-mode)
    (save-excursion
      (save-restriction
        (goto-char (point-min))
        ;; Check if the org buffer even has images first
        (when (re-search-forward "\\[\\[.*\\(png\\|jpe?g\\|gif\\|webp\\)\\]\\]" nil :noerror)
          (setq org-image-actual-width (round (* (window-pixel-width) 0.4)))
          (setq-local scroll-conservatively 0)
          (org-display-inline-images t t))))))

(add-hook 'org-mode-hook #'jl/org-resize-inline)
(add-hook 'after-save-hook #'jl/org-resize-inline)
;; Modified from org-rog to work with grim and slurp
(defun jl/org-grim-slurp ()
  "Screenshots an image to an org-file."
  (interactive)
  (if buffer-file-name
      (progn
        (message "Waiting for region selection with mouse...")
        (let* ((filename
               (concat (file-name-nondirectory buffer-file-name)
                       "_"
                       (format-time-string "%Y%m%d_%H%M%S")
                       ".png"))
               (directory-path (file-name-as-directory (expand-file-name (read-file-name "Select screenshot destination directory: " nil default-directory))))
               (full-path (concat directory-path filename))
               (rel-path (file-relative-name full-path default-directory))
               (rel-path-with-dot (if (string-prefix-p "." rel-path) rel-path (concat "./" rel-path)))) ;ensure ./ prefix
          (unless (file-directory-p directory-path)
            (make-directory directory-path t))
          (shell-command (replace-regexp-in-string "\n" "" (format "grim -g \"%s\" %s" (shell-command-to-string "slurp -d -c \"#cba6f7\"") full-path)))
          (insert "[[" rel-path-with-dot "]]")
          (org-display-inline-images t t))
        (message "File created and linked..."))
    (message "You're in a not saved buffer! Save it first!")))
#+end_src
*** Org Agenda
#+begin_src emacs-lisp
(let ((dir "~/sync/notes/agenda"))
  (if (file-directory-p dir)
      (setq jl/org-agenda-dir dir)
      (setq jl/org-agenda-dir (expand-file-name "org/agenda" user-emacs-directory))
      (make-directory jl/org-agenda-dir t)))
(setq org-agenda-files `(,jl/org-agenda-dir)
      org-todo-keywords '((sequence
        "TODO(t)"           ; Generalized
        "IDEA(i)"           ; 
        "WAIT(w)"           ; Something is holding up this task
        "REMIND(r)"           ; Something is holding up this task
        "|"                 ; The pipe necessary to separate "active" states and "inactive" states
        "DONE(d)"           ; Task has been completed
        "CANCELLED(c)")) ; Task has been cancelled
      org-agenda-window-setup 'only-window
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-timestamp-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-start-day "-3d"
      org-agenda-span 18
      org-agenda-start-on-weekday nil
      ;; Holidays
      calendar-holidays
        '((holiday-fixed 1 1 "New Year's Day")
          (holiday-fixed 2 14 "Valentine's Day")
          (holiday-fixed 4 1 "April Fools' Day")
          (holiday-easter-etc -2 "Good Friday")
          (holiday-easter-etc 0 "Easter Sunday")
          (holiday-easter-etc 1 "Easter Monday")
          (holiday-float 5 0 2 "Mother's Day")
          (holiday-float 5 1 -1 "Memorial Day")
          (holiday-float 6 0 3 "Father's Day")
          (holiday-fixed 7 4 "Independence Day")
          (holiday-float 9 1 1 "Labor Day")
          (holiday-fixed 10 31 "Halloween")
          (holiday-float 11 4 4 "Thanksgiving")
          (holiday-fixed 12 24 "Christmas Eve")
          (holiday-fixed 12 25 "Christmas Day")
          (holiday-fixed 12 31 "New Year's Eve"))
      org-agenda-category-icon-alist
        '(("Birthday" ("" nil nil :ascent center))
          ("Holiday" ("" nil nil :ascent center))
          ("Agenda" ("" nil nil :ascent center))
          ("Reminder" ("" nil nil :ascent center)))) 


(add-hook 'org-agenda-mode-hook (lambda ()
  (display-line-numbers-mode -1)))

;; Archive all "Agenda" entries that are done automatically
(add-hook 'org-after-todo-state-change-hook (lambda ()
  (when (and (string= org-state "DONE")
             (string= (org-get-category) "Agenda"))
    (org-archive-subtree))))

(set-face-attribute 'org-agenda-date-today nil :foreground "#89b4fa")

(leader
  "a" '(:ignore t :wk "Org Agenda")
  "a a" '(org-agenda :wk "Display the org agenda view")
  "a t" '(org-time-stamp :wk "Insert a timestamp")
  "a p" '(org-priority :wk "Set the priority for a tag")
  "a e" '((lambda () (interactive) (find-file (concat jl/org-agenda-dir "/agenda.org"))) :wk "Edit the org agenda file"))
(general-define-key 
  :keymaps 'calendar-mode-map
  :states '(normal insert motion emacs)
  "RET" #'org-calendar-select)
#+end_src
*** Org Toc
#+begin_src emacs-lisp
(use-package toc-org
  :hook ((org-mode markdown-mode) . toc-org-enable))
#+end_src
*** Org Autolist
#+begin_src emacs-lisp
(use-package org-autolist
  :hook (org-mode . org-autolist-mode))
#+end_src
*** Org Appear
#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
    (setq org-hide-emphasis-markers t		;; A default setting that needs to be t for org-appear
          org-appear-autoemphasis t		;; Enable org-appear on emphasis (bold, italics, etc)
          org-appear-autolinks nil		;; Don't enable on links
          org-appear-autosubmarkers t))	;; Enable on subscript and superscript
#+end_src
*** Org Modern
#+begin_src emacs-lisp
(use-package org-modern
  :hook (after-init . (lambda () (add-hook 'find-file-hook #'global-org-modern-mode)))
  :config
    (global-org-modern-mode)
    (setq org-modern-todo nil 
          org-modern-priority nil
          org-modern-tag nil
          org-modern-list
          '((43 . "◦")
            (45 . "")
            (42 . "•"))
          org-modern-fold-stars
          '(("󰪥" . "󰪥")
            ("󰨑" . "󰨑")
            ("󱓝" . "󱓝")
            ("󰗮" . "󰗮")
            ("" . ""))))
#+end_src
*** Org Last Modified
#+begin_src emacs-lisp 
(defun jl/org-find-time-file-property (property &optional anywhere)
  "Return the position of the time file PROPERTY if it exists.

When ANYWHERE is non-nil, search beyond the preamble."
  (save-excursion
    (goto-char (point-min))
    (let ((first-heading
           (save-excursion
             (re-search-forward org-outline-regexp-bol nil t))))
      (when (re-search-forward (format "^#\\+%s:" property)
                               (if anywhere nil first-heading)
                               t)
        (point)))))

(defun jl/org-has-time-file-property-p (property &optional anywhere)
  "Return the position of time file PROPERTY if it is defined.

As a special case, return -1 if the time file PROPERTY exists but
is not defined."
  (when-let ((pos (jl/org-find-time-file-property property anywhere)))
    (save-excursion
      (goto-char pos)
      (if (and (looking-at-p " ")
               (progn (forward-char)
                      (org-at-timestamp-p 'lax)))
          pos
        -1))))

(defun jl/org-set-time-file-property (property &optional anywhere pos)
  "Set the time file PROPERTY in the preamble.

When ANYWHERE is non-nil, search beyond the preamble.

If the position of the file PROPERTY has already been computed,
it can be passed in POS."
  (when-let ((pos (or pos
                      (jl/org-find-time-file-property property))))
    (save-excursion
      (goto-char pos)
      (if (looking-at-p " ")
          (forward-char)
        (insert " "))
      (delete-region (point) (line-end-position))
      (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
        (insert now)))))

(defun jl/org-set-last-modified ()
  "Update the LAST_MODIFIED file property in the preamble."
  (when (derived-mode-p 'org-mode)
    (jl/org-set-time-file-property "modified")))
(add-hook 'before-save-hook #'jl/org-set-last-modified)
#+end_src

*** Org Roam
#+begin_src emacs-lisp
(let ((dir "~/sync/notes/roam"))
  (if (file-directory-p dir)
      (setq jl/org-roam-dir dir)
      (setq jl/org-roam-dir (expand-file-name "org/roam" user-emacs-directory))
      (make-directory jl/org-roam-dir t)))
(use-package org-roam
  :general
    (leader
      "r" '(:ignore t :wk "Org Roam")
      "r f" '(org-roam-node-find :wk "Find org roam file")
      "r c" '(org-capture-finalize :wk "Capture the roam buffer")
      "r i" '(org-roam-node-insert :wk "Insert node link"))
  :config
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))
    (setq jl/roam-templ "#+created: %U\n#+modified:\n#+export_select_tags: noexport\n#+options: f:nil toc:nil\n#+title: ${title}\n#+filetags:"
          org-roam-node-display-template (concat 
                                           (propertize "${type:10}" 'face 'org-level-2) 
                                           "${title:100}" 
                                           (propertize "${tags:*}" 'face 'org-level-1))
          org-roam-directory (file-truename jl/org-roam-dir)
          org-roam-capture-templates  
            `(("w" "work" plain "%?" :target
                (file+head "work/%<%Y%m%d%H%M%S>-${slug}.org" ,jl/roam-templ)
                  :immediate-finish t
                  :unnarrowed t)
              ("g" "general" plain "%?" :target
                (file+head "general/%<%Y%m%d%H%M%S>-${slug}.org"  ,jl/roam-templ)
                  :immediate-finish t
                  :unnarrowed t)
              ("s" "scratch" plain "%?" :target
                (file+head "scratch/%<%Y%m%d%H%M%S>-${slug}.org" ,jl/roam-templ)
                  :immediate-finish t
                  :unnarrowed t)))
    (org-roam-db-autosync-mode 1)
    (require 'org-roam-protocol))
#+end_src

*** Org Roam UI
#+begin_src emacs-lisp
(use-package org-roam-ui
  :general
    (leader
      "r u" '(org-roam-ui-open :wk "Open the roam UI"))
  :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-open-on-start nil))
#+end_src
*** Olivetti
#+begin_src emacs-lisp
(use-package olivetti
  :hook ((org-mode org-agenda-mode) . olivetti-mode)
  :config
    (set-face-attribute 'olivetti-fringe nil :background jl/bg-1) ; fringes/borders on the sides
    (setq-default olivetti-body-width 0.85)
    (remove-hook 'olivetti-mode-on-hook 'visual-line-mode))
#+end_src
** Minibuffer
#+begin_src emacs-lisp
(general-define-key
  :states '(normal emacs)
  :keymaps 'minibuffer-local-map
    "ESC" #'keyboard-escape-quit
    "<escape>" #'keyboard-escape-quit)
#+end_src
*** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
    (vertico-mode)
  :general
    (:keymaps 'vertico-map
     :states '(normal insert)
      "RET" #'vertico-directory-enter
      "<tab>" #'vertico-next
      "TAB" #'vertico-next
      "<backspace>" #'vertico-directory-delete-char
      "DEL" #'vertico-directory-delete-char
      "<backtab>" #'vertico-previous))
#+end_src
*** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :config
    (marginalia-mode))
#+end_src

** Finding
*** Zoxide
#+begin_src emacs-lisp
(use-package zoxide
  :hook (dired-mode . zoxide-add)
  :general
    (leader
      "f d" '(zoxide-travel :wk "Find directory with Zoxide")))
#+end_src
*** Affe
#+begin_src emacs-lisp
(use-package affe 
  :defer t 
  :config 
    (setq affe-find-command "rg --color=never --files --hidden --glob=!.git/")
    (setq affe-grep-command "rg --null --color=never --max-columns=1000 --no-heading --glob=!.git --line-number -v ^$"))
#+end_src
*** Consult
#+begin_src emacs-lisp
(defun jl/find-in-dir (&optional directory)
  "Find a file in a specific directory
   
  Uses Affe if working with local files, and Consult for remote files"
  (interactive)
  (let ((dir (or directory (file-name-directory (read-file-name "Find in directory: ")))))
    (if (string-prefix-p "/ssh:" default-directory)
      (consult-find dir)
      (affe-find dir))))
(defun jl/find-in-current ()
  "Find a file in the project's directory

  Sets the root of the search to the folders' .git parent path if present

  Uses Affe if working with local files, and Consult for remote files"
  (interactive)
  (let ((dir (vc-root-dir)))
    (if (string-prefix-p "/ssh:" default-directory)
      (if dir
        (consult-find dir)
        (consult-find))
      (if dir
        (affe-find dir)
        (affe-find)))))

(defun jl/grep-in-dir (&optional directory)
  "Find a word in a specified project/folder

  Uses Ripgrep if working with local files, and Grep for remote files"
  (interactive)
  (let ((dir (or directory (file-name-directory (read-file-name "Find in directory: ")))))
    (if (string-prefix-p "/ssh:" default-directory)
      (consult-grep dir)
      (consult-ripgrep dir))))

(defun jl/grep-in-current ()
  "Find a word in the current project/folder

  Sets the root of the search to the folders' .git parent path if present

  Uses Ripgrep if working with local files, and Grep for remote files"
  (interactive)
  (let ((dir (vc-root-dir)))
    (if dir
      (if (string-prefix-p "/ssh:" default-directory)
        (consult-grep dir)
        (consult-ripgrep dir))
      (if (string-prefix-p "/ssh:" default-directory)
        (consult-grep)
        (consult-ripgrep)))))
;; TODO: this is a retarded way to do this, find 
;; a way to make your own buffer source instead
(defun jl/switch-to-buffer ()
  "Use consult with perspective buffers, and also filter out dired buffers"
  (interactive)
  (defvar jl/filter-orig-func (plist-get persp-consult-source :items))
  (plist-put persp-consult-source :items (lambda () 
    (let ((candidates (funcall jl/filter-orig-func)))
      (delq nil ; remove nils from the resulting list
        (mapcar (lambda (buf)
                    (with-current-buffer buf
                      (unless (or (derived-mode-p 'dired-mode)
                                  (derived-mode-p 'magit-mode)) buf))) candidates)))))
   (setq consult-buffer-sources '(persp-consult-source))
   (consult-buffer))

(defun jl/switch-to-dired ()
  "Use consult with perspective buffers, and only show"
  (interactive)
  (defvar jl/filter-orig-func (plist-get persp-consult-source :items))
  (plist-put persp-consult-source :items (lambda () 
    (let ((candidates (funcall jl/filter-orig-func)))
      (delq nil ; for some reason the returned list includes nil instead of just excluding the dired buffers
        (mapcar (lambda (buf)
                    (with-current-buffer buf
                      (when (derived-mode-p 'dired-mode) buf))) candidates)))))
   (setq consult-buffer-sources '(persp-consult-source))
   (consult-buffer))

(use-package consult
  :demand t ; persp-consult-source needs to be loaded
  :general
    (leader
      "b f" '(jl/switch-to-buffer :wk "Find a buffer, or create a new one")
      "b d" '(jl/switch-to-dired :wk "Find a dired buffer, or create a new one")
      "f b" '(consult-bookmark :wk "Find a bookmark")
      "f r" '(jl/find-in-current :wk "Find file in current dir/project")
      "f R" '(jl/find-in-dir :wk "Find file in specified dir/project")
      "f h" '((lambda () (interactive) (jl/find-in-dir "~")) :wk "Find file in $HOME")
      "f H" '((lambda () (interactive) (jl/find-in-dir "/")) :wk "Find file in /")
      "f w" '(jl/grep-in-current :wk "Find word in current dir/project")
      "f W" '(jl/grep-in-dir :wk "Find word in specified dir/project"))
  :config
    ;; Exclude dired buffers from the buffer list and use consult with perspective
    (setq consult-find-args "find . -not ( -path '*/.git*' -prune ) -not ( -path '*.git*' -prune )"))
#+end_src
** Completion
*** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :hook (after-init . (lambda () (add-hook 'find-file-hook #'global-corfu-mode)))
        (eval-expression-minibuffer-setup . corfu-mode)
        (ement-room-read-string-setup . (lambda () 
          (setq-local completion-at-point-functions 
            '(ement-room--complete-members-at-point ement-room--complete-rooms-at-point cape-emoji))
          (corfu-mode 1)))
  :general
    (:keymaps 'corfu-map :states 'insert
      "SPC" #'corfu-insert-separator
      "<tab>" #'corfu-next
      "TAB" #'corfu-next
      "<backtab>" #'corfu-previous)
  :config
    (corfu-popupinfo-mode)
    (corfu-history-mode)
    (setq corfu-auto t
          corfu-cycle t
          corfu-preselect 'prompt
          corfu-auto-delay 0.05
          corfu-auto-prefix 2
          global-corfu-minibuffer nil
          corfu-popupinfo-delay 0)
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)

    ;; Prevent evil from overriding corfu bindings
    (advice-add #'corfu--setup :after (lambda (&rest r) (evil-normalize-keymaps)))
    (advice-add #'corfu--teardown :after (lambda (&rest r) (evil-normalize-keymaps)))
    (evil-make-overriding-map corfu-map)

    ;; Rice it up 
    (set-face-attribute 'corfu-default nil :background jl/bg-0)
    (set-face-attribute 'corfu-current nil :box jl/acc-0)
    (set-face-attribute 'corfu-border nil :background jl/acc-1)
    (set-face-attribute 'corfu-bar nil :background jl/acc-0)

    ;; Quit completion after entering normal mode
    (add-hook 'evil-insert-state-exit-hook #'corfu-quit)

    ;; `SPC' is used as my separator, this comes with some quirks which this advice solves
    ;; 1. If there is a candidate selected, insert it when hitting `SPC'
    ;; 2. If not, insert the seperator like normal
    ;; 3. If there are no candidates, quit completion
    (advice-add 'corfu-insert-separator :after (lambda () 
      (if (= corfu--index -1)
          (when (= corfu--total 0) 
            (corfu-quit))
          (corfu-insert)))))
#+end_src
**** Corfu Terminal
#+begin_src emacs-lisp
(use-package corfu-terminal
  :if (not window-system)
  :after corfu
  :config
    (corfu-terminal-mode 1))
#+end_src
*** Cape
#+begin_src emacs-lisp
(use-package cape :defer t)
(add-to-list 'completion-at-point-functions #'cape-dabbrev)
(add-to-list 'completion-at-point-functions #'cape-emoji)
(add-to-list 'completion-at-point-functions #'cape-file)
(add-to-list 'completion-at-point-functions #'cape-elisp-block)
(add-to-list 'completion-at-point-functions #'cape-keyword)
#+end_src
*** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :config
    (setq completion-styles '(orderless basic)
          completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
(use-package magit 
  :hook (magit-post-stage . (lambda () (message "Staged")))
  :general
    (leader
      "g s" '(magit-stage-file :wk "Stage Files")
      "g S" '(magit-stage-modified :wk "Stage All Files")
      "g u" '(magit-unstage-file :wk "Unstage Files")
      "g U" '(magit-unstage-all :wk "Unstage All Files")
      "g f" '(magit-fetch :wk "Fetch")
      "g F" '(magit-fetch-all :wk "Fetch")
      "g i" '(magit-init :wk "Init")
      "g l" '(magit-log :wk "Log")
      "g b" '(magit-branch :wk "Branch")
      "g d" '(magit-diff :wk "Diff")
      "g c" '(magit-commit :wk "Commit")
      "g r" '(magit-rebase :wk "Rebase")
      "g R" '(magit-reset :wk "Reset")
      "g p" '(magit-push :wk "Push")
      "g P" '(magit-pull :wk "Pull")
      "g m" '(magit :wk "Magit Menu")))
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :hook (after-init . (lambda () (add-hook 'find-file-hook (lambda ()
    (unless (file-remote-p default-directory)
      (git-gutter-mode 1)))))))
#+end_src
** Misc
*** Dashboard
#+begin_src emacs-lisp
(defun jl/random-quote ()
  "Generate a random quote for dashboard"
  (interactive)
  (let ((ops '(
    "Hello World!"
    "Whopper Whopper Whopper Whopper Junior Double Triple Whopper"
    "sudo systemctl stop justinlime"
    "sudo systemctl start justinlime"
    "sudo systemctl restart justinlime"
    "White Monster"
    "https://stinkboys.com"
    "Stink Boys Inc. ©"
    "/home/justinlime/.config"
    "No emacs???"))) (nth (random (length ops)) ops)))

(defun jl/random-ascii ()
  "Generate a random quote for dashboard"
  (interactive)
  (let ((ops '(
"
⠀⠀⠀⠀⠀⡰⢂⣾⠿⠛⠒⠚⠛⠃⠺⢶⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢠⡣⠋⠁⠀⠀⠀⠀⠀⢀⡐⠒⢙⣄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡘⠀⠀⠀⠀⠀⠀⢄⠉⠀⠐⠀⠀⠙⢦⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣾⠁⠀⠀⠄⠂⢈⣠⠎⠀⠀⣸⣿⡿⠓⢬⡇⠀⠀⠀⠀⠀
⠀⠀⢸⡟⠀⠔⣁⣤⣶⣿⠋⢰⠀⠀⣿⡟⠻⣦⠀⢳⠀⠀⠀⠀⠀
⠀⠀⣷⡇⢠⣾⢟⢭⣭⡭⡄⠀⡆⠀⣿⣷⣶⠺⡆⢸⡄⠀⠀⠀⠀
⠀⠀⠇⡇⠛⠡⣑⣈⣛⠝⢁⡀⠇⠀⣿⡿⠛⠒⣡⠇⣧⣀⠀⠀⠀
⠀⠀⢠⠁⠈⠐⠤⠄⠀⣠⢸⠈⠢⠀⣿⡇⠀⠀⠠⠚⣿⣿⠀⠀⠀
⡄⠀⢾⠀⡆⠠⣴⠞⠯⡀⠈⠙⠲⣶⣿⡇⠑⣦⡄⠀⣿⣿⠀⠀⠀
⠈⠺⡮⠀⢡⠀⠀⠀⠀⠀⠁⠐⠒⠒⠛⠃⠈⠛⠇⠀⡏⡏⠀⠀⠀
⠀⢰⠁⠀⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⢷⠀⠀⠀
⠀⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠃⠀⢸⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀
⠀⠀⢣⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠸⡳⡀⠀
⠀⠀⠀⠑⢄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣯⣼⡇⠑⣄
"
"
⠀⣞⢽⢪⢣⢣⢣⢫⡺⡵⣝⡮⣗⢷⢽⢽⢽⣮⡷⡽⣜⣜⢮⢺⣜⢷⢽⢝⡽⣝
⠸⡸⠜⠕⠕⠁⢁⢇⢏⢽⢺⣪⡳⡝⣎⣏⢯⢞⡿⣟⣷⣳⢯⡷⣽⢽⢯⣳⣫⠇
⠀⠀⢀⢀⢄⢬⢪⡪⡎⣆⡈⠚⠜⠕⠇⠗⠝⢕⢯⢫⣞⣯⣿⣻⡽⣏⢗⣗⠏⠀
⠀⠪⡪⡪⣪⢪⢺⢸⢢⢓⢆⢤⢀⠀⠀⠀⠀⠈⢊⢞⡾⣿⡯⣏⢮⠷⠁⠀⠀⠀
⠀⠀⠀⠈⠊⠆⡃⠕⢕⢇⢇⢇⢇⢇⢏⢎⢎⢆⢄⠀⢑⣽⣿⢝⠲⠉⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡿⠂⠠⠀⡇⢇⠕⢈⣀⠀⠁⠡⠣⡣⡫⣂⣿⠯⢪⠰⠂⠀⠀⠀⠀
⠀⠀⠀⠀⡦⡙⡂⢀⢤⢣⠣⡈⣾⡃⠠⠄⠀⡄⢱⣌⣶⢏⢊⠂⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢝⡲⣜⡮⡏⢎⢌⢂⠙⠢⠐⢀⢘⢵⣽⣿⡿⠁⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠨⣺⡺⡕⡕⡱⡑⡆⡕⡅⡕⡜⡼⢽⡻⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣼⣳⣫⣾⣵⣗⡵⡱⡡⢣⢑⢕⢜⢕⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣴⣿⣾⣿⣿⣿⡿⡽⡑⢌⠪⡢⡣⣣⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⡟⡾⣿⢿⢿⢵⣽⣾⣼⣘⢸⢸⣞⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠁⠇⠡⠩⡫⢿⣝⡻⡮⣒⢽⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
"
    ))) (nth (random (length ops)) ops)))
(defun jl/random-icon ()
  "Generate a random image for dashboard"
  (interactive)
  (let* ((icons-dir (expand-file-name "icons/" user-emacs-directory))
        (ops (delete "." (delete ".." (directory-files icons-dir))))
        (file (nth (random (length ops)) ops)))
          (expand-file-name file icons-dir)))

(use-package dashboard
  :hook (dashboard-mode . (lambda () (jl/set-local-font (+ jl/font-size 10))))
  :config
    (setq default-directory "~/"
          dashboard-icon-type 'nerd-icons
          dashboard-set-file-icons t
          dashboard-vertically-center-content t
          dashboard-center-content t
          dashboard-display-icons-p t
          initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")) 
          dashboard-banner-logo-title (jl/random-quote)
          dashboard-footer-messages `(,(jl/random-quote)))
    (if (display-graphic-p)
      (setq dashboard-startup-banner (jl/random-icon))
      (progn
        (setq dashboard-startup-banner 'ascii)
        (setq dashboard-banner-ascii (jl/random-ascii))))
    (dashboard-setup-startup-hook))

#+end_src
*** Perspective
#+begin_src emacs-lisp
(use-package perspective
  :init
    (setq persp-suppress-no-prefix-key-warning t)
    (setq persp-initial-frame-name "emacs")
    (persp-mode)
  :general
    (leader
      "b i" '(persp-ibuffer :wk "Buffer Menu (IBuffer)")
      "p f" '(persp-switch :wk "Find perspective, or create new one")
      "p h" '(persp-prev :wk "Previous perspective")
      "p l" '(persp-next :wk "Next perspective")
      "p k" '((lambda () (interactive) (if (yes-or-no-p "Kill the current perspective?")(persp-kill (persp-current-name)))) :wk "Kill the current perspective")
      "p 1" '((lambda () (interactive) (persp-switch-by-number 1)) :wk "Switch to perspective 1")
      "p 2" '((lambda () (interactive) (persp-switch-by-number 2)) :wk "Switch to perspective 2")
      "p 3" '((lambda () (interactive) (persp-switch-by-number 3)) :wk "Switch to perspective 3")
      "p 4" '((lambda () (interactive) (persp-switch-by-number 4)) :wk "Switch to perspective 4")
      "p 5" '((lambda () (interactive) (persp-switch-by-number 5)) :wk "Switch to perspective 5")
      "p 6" '((lambda () (interactive) (persp-switch-by-number 6)) :wk "Switch to perspective 6")
      "p 7" '((lambda () (interactive) (persp-switch-by-number 7)) :wk "Switch to perspective 7")
      "p 8" '((lambda () (interactive) (persp-switch-by-number 8)) :wk "Switch to perspective 8")
      "p 9" '((lambda () (interactive) (persp-switch-by-number 9)) :wk "Switch to perspective 9")
      "p 0" '((lambda () (interactive) (persp-switch-by-number 0)) :wk "Switch to perspective 0"))
  :config
    (require 'ibuffer)
    (setq persp-sort 'created)
    ;; Overriding the function to reverse the sorting order
    (defun persp-names ()
      "Return a list of the names of all perspectives on the `selected-frame'.

    If `persp-sort' is 'name (the default), then return them sorted
    alphabetically. If `persp-sort' is 'access, then return them
    sorted by the last time the perspective was switched to, the
    current perspective being the first. If `persp-sort' is 'created,
    then return them in the order they were created, with the newest
    first."
      (let ((persps (hash-table-values (perspectives-hash))))
        (cond ((eq persp-sort 'created)
                 (mapcar 'persp-name
                   (sort persps (lambda (a b)
                     (time-less-p (persp-created-time a)
                       (persp-created-time b))))))))))
#+end_src
*** Undo Tree
#+begin_src emacs-lisp
(use-package undo-tree
  :hook (after-init . (lambda () (add-hook 'find-file-hook #'global-undo-tree-mode)))
  :config
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist `(("." . ,(concat user-emacs-directory "undo")))))
#+end_src
*** Direnv
#+begin_src emacs-lisp
(use-package envrc
  :hook (after-init . (lambda () (add-hook 'find-file-hook #'envrc-global-mode)))
  :config
    (envrc-global-mode 1))
#+end_src
*** Sideline
#+begin_src emacs-lisp
(use-package sideline
  :hook (prog-mode . sideline-mode)
  :config
    (set-face-attribute 'sideline-default nil :foreground jl/acc-0)
    (setq sideline-backends-left-skip-current-line t   ; don't display on current line (left)
          sideline-backends-right-skip-current-line t  ; don't display on current line (right)
          sideline-order-left 'down                    ; or 'up
          sideline-order-right 'up                     ; or 'down
          sideline-format-left "%s   "                 ; format for left aligment
          sideline-format-right "   %s"                ; format for right aligment
          sideline-priority 100                        ; overlays' priority
          sideline-display-backend-name t))            ; display the backend name
#+end_src
**** Sideline Flymake
#+begin_src emacs-lisp
(use-package sideline-flymake
  :after sideline
  :config
    (setq sideline-flymake-display-mode 'line) ; 'line or 'point
    (setq sideline-backends-right '(sideline-flymake)))
#+end_src
*** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :after corfu
  :config 
    (yas-reload-all)
    (use-package yasnippet-snippets :ensure t) (yas-reload-all))
#+end_src
**** Yasnippet Capf
#+begin_src emacs-lisp
(use-package yasnippet-capf 
  :after yasnippet
  :config
    (setq yasnippet-capf-lookup-by 'name)
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src
*** Sudo Edit
#+begin_src emacs-lisp
(use-package sudo-edit :defer t)
#+end_src
** Programming Modes
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda ()
  (jl/set-local-font (- jl/font-size 10))))
#+end_src
*** Python Mode
#+begin_src emacs-lisp
(add-hook 'python-ts-mode-hook (lambda()
  (setq tab-width 4
        indent-tabs-mode nil)))
#+end_src
*** Javascript Mode
#+begin_src emacs-lisp
(add-hook 'js-ts-mode-hook (lambda()
  ;; (setq-local eglot-ignored-server-capabilities '(:hoverProvider))
  (setq tab-width 2
        indent-tabs-mode nil
        js-indent-level 2)))
#+end_src
*** TypeScript Mode
#+begin_src emacs-lisp
(add-hook 'typescript-ts-mode-hook (lambda()
  ;; (setq-local eglot-ignored-server-capabilities '(:hoverProvider))
  (setq tab-width 2
        indent-tabs-mode nil)))
#+end_src
*** Web Mode
#+begin_src emacs-lisp 
(use-package web-mode 
  :mode 
    ("\\.vue\\'"
     "\\.svelte\\'"
     "\\.html\\'")
  :config 
  (setq web-mode-auto-close-style 2)
  (setq web-mode-enable-auto-closing t)
  (add-hook 'web-mode-hook (lambda ()
    (setq tab-width 2
          indent-tabs-mode nil))))
#+end_src
*** Go Mode
#+begin_src emacs-lisp
(add-hook 'go-ts-mode-hook (lambda()
  (setq tab-width 4
        go-ts-mode-indent-offset 4
        indent-tabs-mode nil)))
#+end_src
*** Nix Mode
#+begin_src emacs-lisp
(use-package nix-ts-mode :mode "\\.nix\\'")
#+end_src
*** Lua Mode
#+begin_src emacs-lisp
(use-package lua-mode 
  :mode "\\.lua\\'"
  :config
  (add-hook 'lua-mode-hook (lambda()
    (setq tab-width 4))))
#+end_src
*** Elixir Mode
#+begin_src emacs-lisp
(use-package elixir-ts-mode :mode "\\.exs\\'")
#+end_src
*** Rust Mode
#+begin_src emacs-lisp
(add-hook 'rust-ts-mode-hook (lambda()
  (setq tab-width 4)))
#+end_src
*** PowerShell Mode
#+begin_src emacs-lisp
(use-package powershell :mode ("\\.ps1\\'" . powershell-mode))
#+end_src
*** Markdown Mode
#+begin_src emacs-lisp
(use-package markdown-mode :mode "\\.md\\'")
#+end_src
** Style
*** Themes
#+begin_src emacs-lisp
(use-package doom-themes
  :config
    ;; something keeps overriding the cursor color, so run it in a one-shot timer
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
*** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
    (set-face-attribute 'doom-modeline nil :background jl/bg-0) ; doom mode line background
    (doom-modeline-mode 1)
    (display-battery-mode 1)
    (display-time-mode))
#+end_src
*** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :config
    (setq nerd-icons-font-family jl/mono-font))
#+end_src
**** Nerd Icons Dired
#+begin_src emacs-lisp
(use-package nerd-icons-dired 
  :hook (dired-mode . nerd-icons-dired-mode))
#+end_src
**** Nerd Icons Corfu
#+begin_src emacs-lisp
(use-package nerd-icons-corfu 
  :after corfu 
  :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
**** Nerd Icons Completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :hook (minibuffer-setup . nerd-icons-completion-mode))
#+end_src
**** Nerd Icons Ibuffer
#+begin_src emacs-lisp
(advice-add 'persp-ibuffer :after (lambda (&rest r) (nerd-icons-ibuffer-mode 1)))
(use-package nerd-icons-ibuffer :defer t)
#+end_src
*** Highlight TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
    (setq hl-todo-keyword-faces
        '(("TODO"   . "#FF0000")
          ("FIXME"  . "#1E90FF")
          ("DEBUG"  . "#A020F0")
          ("GOTCHA" . "#a6e3a1")
          ("STUB"   . "#f9e2af"))))
#+end_src
*** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+end_src
*** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters 
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
*** Prism Mode
#+begin_src emacs-lisp
(use-package prism
  :config
    (setq prism-comments nil)
    (setq prism-strings t)
    ;; use advice instead of the emacs-lisp mode hook so it activates in org src blocks
    (advice-add #'emacs-lisp-mode :after (lambda (&rest r) (prism-mode 1)))
    (advice-add #'json-ts-mode :after (lambda (&rest r) (prism-mode 1)))
    (prism-set-colors
      :desaturations '(0)
      :lightens '(0)
      :colors (mapcar #'doom-color '(red magenta blue green violet cyan))))
#+end_src
*** Pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :vc (pulsar :url "https://github.com/protesilaos/pulsar")
  :config 
    (set-face-attribute 'pulsar-generic nil :background jl/acc-0)
    (pulsar-global-mode 1)
    (setq pulsar-pulse-functions
          '(evil-scroll-up
            evil-scroll-down
            evil-window-down
            evil-window-up
            evil-window-left
            evil-window-right
            evil-window-vsplit
            evil-window-split
            evil-goto-first-line
            evil-goto-line
            undo-tree-undo
            undo-tree-redo)))
#+end_src
*** Treesitter
#+begin_src emacs-lisp
;; levels from 1 - 4, higher numbers being more "colorful"
(setq-default treesit-font-lock-level 4)

;; some keyword overrides
(set-face-attribute 'font-lock-variable-name-face nil :foreground "#bbc2cf")
(set-face-attribute 'font-lock-property-use-face nil :foreground "#51afef")
(set-face-attribute 'font-lock-property-name-face nil :foreground "#f38ba8")

;; where to source the langs
(setq treesit-language-source-alist
  '((nix "https://github.com/nix-community/tree-sitter-nix")
    (c "https://github.com/tree-sitter/tree-sitter-c")
    (c-sharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
    (python "https://github.com/tree-sitter/tree-sitter-python")
    (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
    (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
    (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
    (json "https://github.com/tree-sitter/tree-sitter-json")
    (toml "https://github.com/tree-sitter/tree-sitter-toml")
    (yaml "https://github.com/ikatyang/tree-sitter-yaml")
    (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
    (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
    (rust "https://github.com/tree-sitter/tree-sitter-rust")
    ;; (html "https://github.com/tree-sitter/tree-sitter-html") ;not used yet cant find a good html-ts-mode and I dont feel like making one
    (css "https://github.com/tree-sitter/tree-sitter-css")
    (go "https://github.com/tree-sitter/tree-sitter-go")
    (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
    (java "https://github.com/tree-sitter/tree-sitter-java")
    (bash "https://github.com/tree-sitter/tree-sitter-bash")))

;; Org mode src blocks for treesitter
(setq org-src-lang-modes 
  '(("go" . go-ts)
    ("cpp" . c++-ts)
    ("toml" . toml-ts)
    ("yaml" . toml-ts)
    ("json" . json-ts)
    ("bash" . bash-ts)
    ("rust" . rust-ts)
    ("C" . c-ts)
    ("nix" . nix-ts)
    ("python" . python-ts)
    ("elisp" . emacs-lisp)
    ("js" . js-ts)
    ("ts" . typescript-ts)
    ("java" . java-ts)
    ("css" . css-ts)))

;; auto install any missing defined langs
(dolist (lang treesit-language-source-alist)
  (unless (treesit-language-available-p (car lang))
    (treesit-install-language-grammar (car lang))))

;; maps the ts modes to normal modes
(mapc (lambda (mode-remap) (add-to-list 'major-mode-remap-alist mode-remap))
  '((c-mode . c-ts-mode)
    (c++-mode . c++-ts-mode)
    ;; (csharp-mode . csharp-ts-mode) ;; csharp-ts-mode is broken for me, idk why
    (sh-mode . bash-ts-mode)
    (css-mode . css-ts-mode)
    (python-mode . python-ts-mode)
    (javascript-mode . js-ts-mode)
    (java-mode . java-ts-mode)))

;; for modes that have an existing ts mode but no existing normal mode
(mapc (lambda (auto-mode) (add-to-list 'auto-mode-alist auto-mode))
  '(("\\.go\\'" . go-ts-mode)
    ("\\.rs\\'" . rust-ts-mode)
    ("\\.toml\\'" . toml-ts-mode)
    ("\\.yml\\'" . yaml-ts-mode)
    ("\\.yaml\\'" . yaml-ts-mode)
    ("\\.json\\'" . json-ts-mode)
    ("\\.ts\\'" . typescript-ts-mode)
    ("\\.tsx\\'" . tsx-ts-mode)))

;; If you need to override the names of the expected libraries, defualt emacs looks for libtree-sitter-${LANG_NAME}
;; (setq treesit-load-name-override-list
;;    '((cc "libtree-sitter-c")
;;      (gomod "libtree-sitter-go")))
#+end_src
*** Additional touches
#+begin_src emacs-lisp
;; I mostly use themes just for the text highlighting, 
;; pretty much everything else here
(add-hook 'minibuffer-setup-hook (lambda ()
  (face-remap-add-relative 'default
                `(:background ,jl/bg-0))
  (face-remap-add-relative 'fringe
                `(:background ,jl/bg-0 :foreground ,jl/bg-0))))

(add-hook 'post-command-hook (lambda ()
  (set-cursor-color (if (derived-mode-p 'dired-mode) jl/acc-1 jl/acc-0))))

(set-face-attribute 'line-number-current-line nil :foreground jl/acc-0)
(set-face-attribute 'org-block nil :background jl/bg-0) ; src blocks
(set-face-attribute 'org-block-begin-line nil :background jl/bg-0) ; #+begin_src
(set-face-attribute 'org-block-end-line nil :background jl/bg-0) ; #+end_src
(set-face-attribute 'mode-line nil :background jl/bg-0) ; mode line background
(set-face-attribute 'mode-line-inactive nil :background jl/bg-0) ; mode line background on inactive buffers
(set-face-attribute 'default nil :background jl/bg-1) ; emacs background
(set-face-attribute 'fringe nil :background jl/bg-1) ; fringes/borders on the sides
(set-face-attribute 'org-hide nil :foreground jl/bg-1) ; asterisks preceding org headings
(set-face-attribute 'line-number nil :background jl/bg-1) ; line number background
(set-face-attribute 'line-number-current-line nil :background jl/bg-1) ; current line number
(set-face-attribute 'vertical-border nil :background jl/bg-0 :foreground jl/bg-0)
#+end_src


