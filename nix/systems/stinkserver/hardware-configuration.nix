# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
      timeout = 7;
    };
    initrd = {
      availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
      kernelModules = [ ];
    };
    kernelPackages = pkgs.linuxPackages_latest;
    kernelModules = [ "kvm-amd" ];
    extraModulePackages = [ ];
  };

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/98e9a525-6849-4392-90fb-8ef02d6520c0";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" ];
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/B196-C4D9";
      fsType = "vfat";
    };
    "/drives/NVME0" = {
      device = "/dev/disk/by-uuid/466f73dd-c395-4b82-888e-d2ae99c286da";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" ];
    };
    "/drives/BTRFS0" = { #20tb
      device = "/dev/disk/by-uuid/028f290f-d1f7-4b45-b346-47d7864a2e24";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" "autodefrag" "x-systemd.device-timeout=300s" ];
    };
    "/drives/BTRFS1" = { #14tb
      device = "/dev/disk/by-uuid/37a5c38c-0faf-40df-84ee-037340a90d6f";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" "autodefrag" "x-systemd.device-timeout=300s" ];
    };
    "/drives/BTRFS2" = { #14tb 
      device = "/dev/disk/by-uuid/1cdfed35-299b-4b62-93a3-b69e3eebc90e";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" "autodefrag" "x-systemd.device-timeout=300s" ];
    };
    "/drives/BTRFS3" = { #12tb
      device = "/dev/disk/by-uuid/b70381ba-3ddb-48ac-9f21-c0f7b342be78";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" "autodefrag" "x-systemd.device-timeout=300s" ];
    };
    "/drives/PARITY0" = { #20tb parity
      device = "/dev/disk/by-uuid/27ab9146-6226-47fc-8d91-aedc210b9102";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" "autodefrag" "x-systemd.device-timeout=300s" ];
    };
    "/drives/EXTERNAL0" = { #4TB External 
      device = "/dev/disk/by-uuid/78d1947e-0375-4ac3-ad0f-249803877899";
      fsType = "btrfs";
      options = [ "compress-force=zstd:1" "noatime" "autodefrag" "x-systemd.device-timeout=300s" ];
    };
    "/storage/pool" = {
      device = "/drives/BTRFS*";
      fsType = "fuse.mergerfs";
      options = [
        "minfreespace=100G"
        "category.create=mfs"
        "x-systemd.device-timeout=300s"
        "x-systemd.requires=/drives/BTRFS0" "x-systemd.after=/drives/BTRFS0"
        "x-systemd.requires=/drives/BTRFS1" "x-systemd.after=/drives/BTRFS1"
        "x-systemd.requires=/drives/BTRFS2" "x-systemd.after=/drives/BTRFS2"
        "x-systemd.requires=/drives/BTRFS3" "x-systemd.after=/drives/BTRFS3"
      ];
    };
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  services.xserver.videoDrivers = [ "nvidia" ];

  environment.systemPackages = [ pkgs.nvtopPackages.full ];
  systemd.services."limit-gpu-wattage" = {
    description = "Limit nvidia wattage";
    serviceConfig = {
      Type = "oneshot";
      ExecStart = "${pkgs.bash}/bin/bash -c '/run/current-system/sw/bin/nvidia-smi -pm 1 && /run/current-system/sw/bin/nvidia-smi -pl 275'"; # Replace with your actual command
    };
    wantedBy = [ "multi-user.target" ];
  };
  hardware = {
    cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    nvidia-container-toolkit = {
      enable = true;  
    };
    nvidia = {
      modesetting.enable = true;
      powerManagement.enable = true;
      open = true;
      nvidiaSettings = true;
    };
    graphics = {
      enable = true;
      extraPackages = with pkgs; [
        intel-media-driver
      ];
    };
  };
}
